from config import RSS_FEEDS, DAYS_BACK, SUMMARY_MODEL, EMAIL_USER, EMAIL_PASS, EMAIL_RECIPIENTS, SMTP_SERVER, SMTP_PORT
from rss_fetcher import get_recent_articles
from scraper import scrape_article_content
from summarizer import ArticleSummarizer
from formatter import format_articles_markdown
from mailer import send_email_report

from datetime import datetime, timedelta
import time
import logging
from pathlib import Path

# Cr√©ation des dossiers logs et reports
Path("logs").mkdir(exist_ok=True)
Path("reports").mkdir(exist_ok=True)

# Configuration du logger
logging.basicConfig(
    filename="logs/veille.log",
    level=logging.INFO,
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    encoding="utf-8"
)
logger = logging.getLogger()


def main():
    print("üöÄ Lancement de la veille automatique...\n")
    logger.info("=== D√âBUT DU SCRIPT ===")

    # 1. R√©cup√©ration des articles RSS r√©cents
    since_date = datetime.now() - timedelta(days=DAYS_BACK)
    print(f"üì• R√©cup√©ration des articles depuis le {since_date.strftime('%d/%m/%Y')}...")
    logger.info(f"R√©cup√©ration des articles depuis le {since_date.strftime('%d/%m/%Y')}...")

    try:
        articles = get_recent_articles(RSS_FEEDS, DAYS_BACK)
        print(f"üîé {len(articles)} articles trouv√©s.")
        logger.info(f"{len(articles)} articles r√©cup√©r√©s depuis les flux RSS.")
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des flux RSS : {e}")
        return

    # 2. Scraping + 3. R√©sum√©
    summarizer = ArticleSummarizer(model_name=SUMMARY_MODEL)
    summarized_articles = []

    for idx, article in enumerate(articles, 1):
        logger.info(f"Traitement article : {article['title']}")
        print(f"üì∞ ({idx}/{len(articles)}) Traitement de : {article['title'][:60]}...")

        # Scraping
        content = scrape_article_content(article['link'])
        if not content:
            msg = f"Article vide ou inaccessible : {article['link']}"
            print(f"‚ö†Ô∏è {msg}")
            logger.warning(msg)
            continue

        # R√©sum√©
        summary = summarizer.summarize(content)
        if not summary:
            msg = f"R√©sum√© non g√©n√©r√© pour l'article : {article['link']}"
            print(f"‚ö†Ô∏è {msg}")
            logger.warning(msg)
            continue

        article["summary"] = summary
        summarized_articles.append(article)

        time.sleep(1)  # Pour √©viter les requ√™tes trop rapproch√©es

    print(f"‚úÖ {len(summarized_articles)} articles r√©sum√©s avec succ√®s.\n")
    logger.info(f"{len(summarized_articles)} articles r√©sum√©s avec succ√®s.")

    # 4. Formatage du rapport Markdown
    markdown_report = format_articles_markdown(summarized_articles)

    # 4.1. Sauvegarde locale
    report_dir = Path("reports")
    report_dir.mkdir(parents=True, exist_ok=True)
    filename = f"rapport_veille_{datetime.now().strftime('%Y-%m-%d')}.md"
    report_path = report_dir / filename

    try:
        with report_path.open("w", encoding="utf-8") as f:
            f.write(markdown_report)
        print(f"üóÇÔ∏è Rapport sauvegard√© localement : {report_path.resolve()}\n")
        logger.info(f"Rapport sauvegard√© dans {report_path.resolve()}")
    except Exception as e:
        logger.error(f"Erreur lors de la sauvegarde du rapport local : {e}")
        return

    # 5. Envoi par email
    subject = f"üóûÔ∏è Rapport de veille ‚Äì Semaine du {datetime.now().strftime('%d/%m/%Y')}"
    try:
        send_email_report(
            subject=subject,
            markdown_content=markdown_report,
            sender_email=EMAIL_USER,
            sender_password=EMAIL_PASS,
            recipients=EMAIL_RECIPIENTS,
            smtp_server=SMTP_SERVER,
            smtp_port=SMTP_PORT
        )
        logger.info(f"Email envoy√© √† {EMAIL_RECIPIENTS}")
    except Exception as e:
        logger.error(f"Erreur lors de l'envoi de l'email : {e}")
        return

    logger.info("=== FIN DU SCRIPT ===\n")


if __name__ == "__main__":
    main()
